# configuration file for git-cliff (0.1.0)
# https://github.com/orhun/git-cliff
# Run 'make changelog' to update <repo>/CHANGELOG.org.

[changelog]
  # changelog header
  header = """
# This file is auto-generated by running 'make changelog' from the repo root.

* Changelog\n
All notable changes to this project will be documented in this file.\n
"""

  # template for the changelog body
  # https://tera.netlify.app/docs/#introduction
  body = """
{% if version %}\
    ** *{{ version | trim_start_matches(pat="v") }}* - <{{ timestamp | date(format="%Y-%m-%dT%H:%M:%S%.3fZ") | date(timezone="America/New_York") }}>
{% else %}\
    ** :fire: *unreleased*
{% endif %}\
{% if previous %}\
    {% if previous.commit_id %}
        [[https://github.com/kaushalmodi/ox-hugo/compare/{{ previous.commit_id }}...{{ commit_id }}]\
         [{{ previous.commit_id | truncate(length=7, end="") }}...{{ commit_id | truncate(length=7, end="") }}]]
    {% endif %}\
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    *** {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message
             | trim_end
             | replace(from="\n", to=" ")
             | replace(from="  ", to=" ")  | replace(from="    ", to=" ")  | replace(from="      ", to=" ")
             | replace(from="   ", to=" ") | replace(from="     ", to=" ") | replace(from="       ", to=" ")
             | replace(from="https://github.com/kaushalmodi/ox-hugo/issues/", to="Issue ")
             | truncate(length=90)
             | replace(from="[[file:", to="[​[file​:")
             | upper_first }} ([[https://github.com/kaushalmodi/ox-hugo/commit/{{ commit.id }}][{{ commit.id | truncate(length=7, end="") }}]])\
    {% endfor %}
{% endfor %}\n
"""

  # remove the leading and trailing whitespace from the template
  trim = true

  # changelog footer
  footer = """
# This file is generated by git-cliff by running 'make changelog' from the repo root.
"""

[git]
  # parse the commits based on https://www.conventionalcommits.org
  conventional_commits = true
  # filter out the commits that are not conventional
  filter_unconventional = false
  # regex for parsing and grouping commits
  commit_parsers = [
      # https://www.conventionalcommits.org/en/v1.0.0/#summary
      { message = "^[^ ]+!:"                               , group = "@@html:<span style=\"display:none;\">0</span>@@ :boom: Breaking"},
      { message = "^feat"                                  , group = "@@html:<span style=\"display:none;\">1</span>@@ :sparkles: Features"},
      { message = "^perf"                                  , group = "@@html:<span style=\"display:none;\">2</span>@@ :zap: Performance"},
      { message = "^fix"                                   , group = "@@html:<span style=\"display:none;\">3</span>@@ :bug: Bug Fixes"},
      { message = "^docs?"                                 , group = "@@html:<span style=\"display:none;\">4</span>@@ :memo: Documentation"},
      { message = "^refactor"                              , group = "@@html:<span style=\"display:none;\">5</span>@@ :recycle: Refactor"},
      { message = "^test"                                  , group = "@@html:<span style=\"display:none;\">6</span>@@ :hammer: Testing"},
      { message = "^(chore.*|ci:)", skip = true},
      { body = "BREAKING CHANGE:"                          , group = "@@html:<span style=\"display:none;\">0</span>@@ :boom: Breaking"},

      # Non-conventional
      { message = "^([Cc]leanup|[Cc]onsisten|[Tt]ypo)", skip = true},
      { message = "^users(\\.toml)*", skip = true},
      { message = "([Bb]reaking|BREAKING|[Nn]otice|NOTICE)", group = "@@html:<span style=\"display:none;\">0</span>@@ :boom: Breaking"},
      { message = "^([Pp]erf|[Ss]peed|[Oo]ptimiz)"         , group = "@@html:<span style=\"display:none;\">2</span>@@ :zap: Performance"},
      { message = "^[Ff]ix"                                , group = "@@html:<span style=\"display:none;\">3</span>@@ :bug: Bug Fixes"},
      { message = "^[Dd]oc"                                , group = "@@html:<span style=\"display:none;\">4</span>@@ :memo: Documentation"},
      { message = "^(csp|CSP)"                             , group = "@@html:<span style=\"display:none;\">4</span>@@ :memo: Documentation"},
      { message = "([Rr]efactor|[Rr]ename|[Ss]implify)"    , group = "@@html:<span style=\"display:none;\">5</span>@@ :recycle: Refactor"},
      { message = "^([Tt]est|ert|ERT)"                     , group = "@@html:<span style=\"display:none;\">6</span>@@ :hammer: Testing"},
      { message = "^[Mm]akefile"                           , group = "@@html:<span style=\"display:none;\">6</span>@@ :hammer: Testing"},
      { message = ".*from.*tests"                          , group = "@@html:<span style=\"display:none;\">6</span>@@ :hammer: Testing"},

      { message = "([Tt]ravis|gha|GHA)", skip = true},

      # Corner cases
      { message = "([Rr]emove|[Dd]elete).* dead link", skip = true},
      { message = "(Convert.*headings|Parse the.*keyword)", group = "@@html:<span style=\"display:none;\">1</span>@@ :sparkles: Features"},
      { message = "(Clean up|[Ss]witch.*order|Remove.* unnecessary)", group = "@@html:<span style=\"display:none;\">5</span>@@ :recycle: Refactor"},
      { message = "([Pp]revent error|Now returns nil|Update RegExp|Remove b-o-l|Fix math|Fix lack of blank line|nil should be returned)", group = "@@html:<span style=\"display:none;\">3</span>@@ :bug: Bug Fixes"},
  ]
  # filter out the commits that are not matched by commit parsers
  filter_commits = false
  # glob pattern for matching git tags
  tag_pattern = "v[0-9]*"
  # regex for skipping tags
  # skip_tags = "v0.1.0-beta.1"
  # regex for ignoring tags
  # ignore_tags = ""
  # sort the tags chronologically
  date_order = true
  # sort the commits inside sections by oldest/newest order
  sort_commits = "oldest"
